// Protocol for bidding //

Client.(Client,bid) -> Server.Vtuple(String,int); //id & bid
if max(Vtuple) @Server then
    Server.("your bid is max") -> Client.status(String)
else
    Server.("Bid too low") -> Client.status(string)
Server.(getMaxBid()) -> Client.maxBid(int)

// Lav protokol over en hel auktion for en client når han byder.



// Seller transfers item to ReserveItem. kommentar.
// race condition: hvem kom først? hvem vinder auktionen hvis de har samme bud?
// wallstreet, kabler, tættere på = hurtigere
// hvorfor har vi gjort sådan?

Client.(Client,bid) -> Server.clientBid(String,int);
server.("getTime") -> TimeProvider.request("getTime");
timeProvider.(getTime()) -> server.currentTime(Long);

while AuctionNotDoneAndIsMax(clientBid) @Server do {
    Server.("your bid is max") -> Client.status(String);
}
  if(AuctionDone()) @server then {
        Server.(getMaxBid())-> Seller.wallet(int);
        Server.(TransferItem()) -> Client.inventory(String)
    } else {
        Server.("Bid too low") -> Client.status(string)
        Server.(getMaxBid()) -> Client.maxBid(int)
}























// SPØRG (TA) : Benjamin eller magnus

// Server projection // pt.2
Server:

    maxBid := channel(Server, Client).get(Client, bid)
    if max(maxBid) then
        channel(Server, Client).put("then")
        bidChannel(Server).put(maxBid)
        channel(Server, Client).put("Your bid is currently max")
    else
        channel(Server, Client).put("else")
        channel(Server, Client).put("bid too low")
    channel(Server, Client).put("getMaxBid")

Client:

   / maxBid := channel(Client, Server).put(Client, bid)
   / branch := channel(Server, Client).get(string)
   / if branch == "then" then
   /     channel(Client, Server).get(string)
   / else


    maxBid := channel(Client, Server).put(Client, bid)
    channel(Client, Server).get(string)






// Server projection // pt.1

project(biddigProtocol, Server)

project(Line1 ; Line2to6)

project(Line1, Server)
project(Line2to6, Server)

project(Client.makeBid(Client,bid) -> Server.Vtupple(Client,bid), Server) ;
project(Line2to6)

channel(Server, Client).put(Client, bid) ;




// Informal description




par

  walletHolder_1.put(0);
  walletHolder_2.put(0);
  time.put(0);
  sellerInventory.put(0)

[]

  loop true -> walletHolder_1.get(0);
               bidPlaced.put(0)
  pool

[]
  loop true -> walletHolder_2.get(0);
               minimum_bid_userID.put(0)
  pool

[]
  loop true -> Time_token.get(0);
               bidPlaced.get(0);
               sellerwallet.put(0);
               buyer_inventory.put(0)
  pool

[]
  loop true -> sellerwallet.get(0)
  pool

[]
  loop true -> buyer_inventory.get(0)
  pool

[]
  loop true -> reserveItem.get(0)
  pool


rap



// nyt forsøg



par

/* init:
  wallet_1.put(0);
  wallet_2.put(2)
  time_token.put(-1);
  sellerInventory.put(-2)


*/
par

  wallet_1.get(0)
  wallet_2.get(0)
  walletHolder_1.put(0);
  walletHolder_2.put(2);

[]

  loop true -> walletHolder_1.get(0);
               bidPlaced.put(0)
  pool

[]
  loop true -> walletHolder_2.get(0);
               bidPlaced.put(0)
  pool

[]
  loop true -> bidPlaced.get(0);
               wallet_2.put(0)
  pool

[]
  loop true -> Time_token.get(-1);
               bidPlaced.get(0);
               sellerwallet.put(0);
               sellerInventory.get(-2);
               buyer_inventory.put(-2)
  pool

rap





// pt 2

par



    wallet_1.put(0);
    wallet_2.put(0);




    wallet_1.get(0);

    walletHolder_1.put(0)



[]



    walletHolder_1.get(0);

    bidPlaced.put(0)



[]
    loop true ->

    wallet_2.get(0);

    walletHolder_2.put(0)

    pool

[]
    loop true ->

    walletHolder_2.get(0);

    bidPLaced.put(0)

    pool
[]
    loop true ->

    bidPlaced.get(0);

    wallet_2.put(0)

    pool

[]

    time_token.put(0)

[]


    time_token.get(0);
    bidPlaced.get(0);

    seller_wallet.put(0);
    temp_buyer_inventory.put(0)



[]


    temp_buyer_inventory.get(0);
    Reserveitem.get(0);

    buyer_inventory.put(0)




[]

    sellerinventory.put(0)

[]


    sellerinventory.get(0);
    reserveItem.put(0)



rap



// pt. 3



par

    wallet_1.put(0);
    wallet_2.put(0);


    wallet_1.get(0);

    walletHolder_1.put(0)

[]
    walletHolder_1.get(0);

    bidPlaced.put(0)

[]
    wallet_2.get(0);

    walletHolder_2.put(0)

[]
    walletHolder_2.get(0);

    bidPLaced.put(0)

[]
    bidPlaced.get(0);

    wallet_2.put(0)

[]

    time_token.put(0)

[]

    time_token.get(0);
    bidPlaced.get(0);

    seller_wallet.put(0);
    temp_buyer_inventory.put(0)

[]
    temp_buyer_inventory.get(0);
    Reserveitem.get(0);

    buyer_inventory.put(0)


[]

    sellerinventory.put(0)

[]

    sellerinventory.get(0);
    reserveItem.put(0)

rap

// distributed realization:

make_bid_1:
    while(true){
        wallet_1.get("token")
        // Withdraw money from wallet, to ensure client can't bid on two things at once with limited budget.
        walletHolder_1.put("token")
    }

make_bid_2:
    while(true){
        wallet_2.get("token")
        // Withdraw money from wallet, to ensure client can't bid on two things at once with limited budget.
        walletHolder_2.put("token")

    }

conditions_metOrNot(for wallet_1):
    while(true){
        walletHolder_1.get("token");
        if(conditions){ // Check if bid is above current highest bid & within timelimit.
            bidPlaced.put("token")
            // Place the new highest bid.
        } else {
            wallet_1.put("token")
            // return money to the wallet.
        }
    }

conditions_metOrNot(for wallet_2):
    while(true){
        walletHolder_2.get("token"); // Check if bid is above current highest bid & within timelimit.
        if(conditions){
            bidPlaced.put("token")
            // Place the new highest bid.
        } else {
            wallet_2.put("token")
            // return money to the wallet.
        }
    }

pullToken(wallet_1):
    while(true){
            loserToken_1.get("token")
            bidPlaced.get("token")
            // Return previous highest bid to bidder's wallet.
             wallet_1.put("token")

        }

pullToken(wallet_2):
    while(true) {
            loserToken_2.get("token")
            bidPlaced.get("token")
            // Return previous highest bid to bidder's wallet.
            wallet_2.put("token")
        }

winningBid:
    while(true){
            Time_token.get("token") // Token available when auction time ends.
            bidPlaced.get("token") // Gets the maximum bid.
            // Transfer the money to seller's wallet.
            // and give signal to transfer item to buyer.
            temp_buyer_inventory.put("token")
            seller_wallet.put("token")

        }

transferItem:
    while(true) {
                sellerInventory.get("token")
                // Reserve the item from the seller.
                // To avoid he can sell the item serveral times while autciton is active.
                reserveItem.put("token")
    }

get_Item:
    while(true){
            temp_buyer_inventory.get("token")
            reserveItem.get("token")
            // Transfer the item to buyer's inventory.
            buyer_inventory.put("token")
        }